<%- include('../Layout/user/hedder.ejs') %>


<style>
    .address-box {
    position: relative;
    border: 1px solid #ddd;
    padding: 15px;
    margin-bottom: 15px;
    border-radius: 5px;
}

.edit-btn {
    position: absolute;
    top: 10px;
    right: 10px;
    padding: 5px 10px;
    background-color: #f0f0f0;
    border: 1px solid #ccc;
    border-radius: 3px;
    cursor: pointer;
}

.edit-btn:hover {
    background-color: #e0e0e0;
}
.btn-add-address {
    background-color: #ffffff;
    color: #4a4a4a;
    border: 1px solid #4a4a4a;
    border-radius: 15px;
    padding: 5px 10px;
    font-size: 12px;
    font-weight: 500;
    text-transform: uppercase;
    transition: all 0.2s ease;
    cursor: pointer;
    outline: none;
}

.btn-add-address:hover {
    background-color: #4a4a4a;
    color: #ffffff;
}
     .modal-header {
    border-bottom: none;
  }
  
  .modal-footer {
    border-top: none;
  }
  
  .coupon-list {
    max-height: 300px;
    overflow-y: auto;
  }
  
  .coupon-item {
    border: 2px dashed #007bff;
    border-radius: 10px;
    padding: 15px;
    margin-bottom: 15px;
    background-color: #f8f9fa;
    transition: all 0.3s ease;
  }
  
  .coupon-item:hover {
    transform: translateY(-5px);
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
  }
  
  .coupon-code {
    font-size: 1.2em;
    font-weight: bold;
    color: #007bff;
    margin-bottom: 5px;
  }
  
  .coupon-description {
    font-size: 0.9em;
    color: #6c757d;
    margin-bottom: 10px;
  }
  
  .copy-btn {
    float: right;
  }
    /* Style for the address boxes */
    .address-box {
        display: flex;
        align-items: flex-start;
        margin-bottom: 15px;
        padding: 15px;
        border: 1px solid #ddd;
        border-radius: 5px;
    }

    .address-box input[type="radio"] {
        margin-right: 10px;
        cursor: pointer;
    }

    .address-details p {
        margin: 0;
    }

    /* Style for the 'Add New Address' link */
    .add-new-address {
        text-align: center;
        margin-top: 20px;
    }

    .add-new-address a {
        color: #007bff;
        text-decoration: none;
        font-weight: bold;
    }

    .add-new-address a:hover {
        text-decoration: underline;
    }

    /* Style for the address boxes */
    .address-box {
        display: flex;
        align-items: flex-start;
        margin-bottom: 15px;
        padding: 15px;
        border: 1px solid #ddd;
        border-radius: 8px;
        background-color: #f9f9f9;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .address-box input[type="radio"] {
        margin-right: 15px;
        cursor: pointer;
        accent-color: #007bff;
        /* For modern browsers with support for accent-color */
    }

    .address-details p {
        margin: 0;
        font-size: 16px;
        line-height: 1.6;
        color: #333;
    }

    .address-details p:first-child {
        font-weight: bold;
    }

    /* Style for the 'Add New Address' link */
    .add-new-address {
        text-align: center;
        margin-top: 20px;
    }

    .add-new-address a {
        color: #007bff;
        text-decoration: none;
        font-weight: bold;
        font-size: 16px;
    }

    .add-new-address a:hover {
        text-decoration: underline;
        color: #0056b3;
    }
    .cart-detail {
border: 1px solid #ddd;
padding: 20px;
border-radius: 8px;
background-color: #f9f9f9;
box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.cart-detail h2 {
font-size: 24px;
margin-bottom: 15px;
color: #333;
}

.cart-summary {
list-style-type: none;
padding: 0;
margin: 0;
}

.cart-item {
display: flex;
justify-content: space-between;
padding: 10px 0;
border-bottom: 1px solid #eee;
}

.cart-item:last-child {
border-bottom: none;
}

.product-list {
list-style-type: none;
padding: 0;
margin: 0;
}

.product-list li {
display: flex;
justify-content: space-between;
padding: 5px 0;
}

.free-shipping {
color: #28a745; /* Green color for free shipping */
font-weight: bold;
}
.coupon-section {
                        margin-bottom: 20px;
                        padding: 10px;
                        border: 1px solid #ddd;
                        border-radius: 8px;
                        background-color: #f9f9f9;
                    }
                    
                    .coupon-input {
                        display: flex;
                        align-items: center;
                        gap: 10px;
                    }
                    
                    #coupon-code {
                        flex: 1;
                        padding: 5px;
                        border: 1px solid #ccc;
                        border-radius: 4px;
                    }
                    .coupon-section {
    background-color: #f8f9fa;
    border-radius: 10px;
    transition: all 0.3s ease;
}

.coupon-section:hover {
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
}

.card-title {
    color: #333;
    font-weight: bold;
}

.input-group {
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

#coupon-code {
    border: none;
    padding: 10px 15px;
}

.apply-coupon-btn {
    background-color: #007bff;
    border: none;
    padding: 10px 20px;
    transition: background-color 0.3s ease;
}

.apply-coupon-btn:hover {
    background-color: #0056b3;
}

.show-coupons-btn {
    border: 2px dashed #6c757d;
    padding: 10px;
    transition: all 0.3s ease;
}

.show-coupons-btn:hover {
    background-color: hsl(204, 13%, 8%);
    color: white;
    
}
.coupon-section {
        background-color: #f8f9fa;
        border-radius: 10px;
        transition: all 0.3s ease;
    }

    .coupon-section:hover {
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }

    .card-title {
        color: #333;
        font-weight: bold;
    }

    .input-group {
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        position: relative;
    }

    #coupon-code {
        border: none;
        padding: 10px 15px;
        padding-right: 80px; /* Make space for the button */
    }

    .input-group-append {
        position: absolute;
        right: 5px;
        top: 50%;
        transform: translateY(-50%);
        z-index: 10;
    }

    .apply-coupon-btn {
        background-color: #007bff;
        border: none;
        padding: 5px 15px;
        transition: background-color 0.3s ease;
    }

    .apply-coupon-btn:hover {
        background-color: #0056b3;
    }

    .show-coupons-btn {
        border: 2px dashed #6c757d;
        padding: 10px;
        transition: all 0.3s ease;
    }

    .show-coupons-btn:hover {
        background-color: #6c757d;
        color: white;
    }


    .cart-detail {
        border: 1px solid #ddd;
        padding: 30px 20px; /* Increased padding for more height */
        border-radius: 8px;
        background-color: #ffffff;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
        min-height: 250px; /* Set a minimum height */
    }

    .cart-detail h2 {
        font-size: 24px;
        margin-bottom: 20px; /* Adjusted margin for better spacing */
        color: #007bff;
    }

    .form-group {
        margin-bottom: 20px; /* Added margin for spacing between payment options */
    }

    .radio {
        padding: 10px 0;
        font-size: 18px; /* Increased font size */
    }

    .radio label {
        display: block;
        padding-left: 25px;
        position: relative;
        cursor: pointer;
        line-height: 24px; /* Adjusted line height for better readability */
    }

    .radio input[type="radio"] {
        position: absolute;
        left: 0;
        top: 0;
        width: 20px;
        height: 20px;
        margin-top: 2px;
        cursor: pointer;
        accent-color: #007bff; /* Matches the theme color */
    }

    h2 {
        font-size: 1.5rem;
        font-weight: bold;
        color: #333;
    }

    .btn-add-address {
        font-size: 1rem;
        padding: 10px 20px;
        width: 100%;
    }

    .address-box {
        border: 1px solid #ddd;
        border-radius: 8px;
        background-color: #f9f9f9;
        transition: background-color 0.3s ease;
    }

    .address-box:hover {
        background-color: #f1f1f1;
    }

    .address-details {
        font-size: 1rem;
        color: #555;
    }

    .edit-btn {
        font-size: 0.875rem;
    }

    .mr-2 {
        margin-right: 10px;
    }

    .mb-3 {
        margin-bottom: 1rem;
    }

    .p-3 {
        padding: 1rem;
    }

    .card {
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .button-container {
    margin-left: auto;
}

.button-container .btn {
    margin-left: 0.5rem; /* Adjust spacing between buttons */
}

</style>


    <div class="colorlib-loader"></div>

    <div id="page">

        <!-- content start here -->

        <div class="breadcrumbs">
            <div class="container">
                <div class="row">
                    <div class="col">
                        <p class="bread"><span><a href="/">Home</a></span> / <span>Checkout</span></p>
                    </div>
                </div>
            </div>
        </div>


        <div class="colorlib-product">
            <div class="container">
                
                <div class="row">
                    <div class="col-lg-8">
                       
                        <div class="coupon-section card shadow-sm p-4 mb-4">
                            <h5 class="card-title mb-3">Discount Coupons</h5>
                            <form id="couponForm" class="mb-3">
                                <div class="input-group">
                                    <input type="text" id="coupon-code" name="couponCode" class="form-control" placeholder="Enter coupon code" required>
                                    <div class="input-group-append">
                                        <button type="submit" class="btn btn-primary apply-coupon-btn">Apply</button>
                                        <button type="button" id="removeCouponBtn" class="btn btn-danger">Remove</button>
                                    </div>
                                </div>
                            </form>
                            <div class="error-message mb-3" id="message" aria-live="polite"></div>
                            <button type="button" class="btn btn-outline-secondary show-coupons-btn w-100" data-toggle="modal" data-target="#myModal">
                                <i class="fas fa-tags me-2"></i>Show All Available Coupons
                            </button>
                        </div>
                        
                       

<h2 class="mb-3">Select an Address</h2>
<div class="add-new-address mb-3">
    <button type="button" class="btn btn-primary btn-add-address" data-toggle="modal" data-target="#addressModal">
        Add New Address
    </button>
</div>
<% if (addresses.length > 0) { %>
    <% addresses.forEach(function(address) { %>
        <div class="address-box card p-3 mb-3 shadow-sm">
            <div class="d-flex justify-content-between align-items-center">
                <div class="d-flex align-items-center">
                    <input type="radio" name="address" value="<%= address._id %>" id="address-<%= address._id %>" class="mr-2">
                    <label for="address-<%= address._id %>" class="address-details">
                        <p><strong><%= address.addressName %></strong></p>
                        <p><%= address.addressHouse %>, <%= address.addressStreet %></p>
                        <p><%= address.addressCity %>, <%= address.addressDistrict %>, <%= address.addressState %> - <%= address.addressPin %></p>
                        <p>Mobile: <%= address.addressMobile %></p>
                    </label>
                </div>
                <div class="button-container ml-auto">
                   
                    <button class="btn btn-sm btn-outline-danger ml-2" 
                            data-id="<%= address._id %>" 
                            aria-label="Delete Address">
                        Delete
                    </button>
                </div>
            </div>
        </div>
    <% }) %>
<% } else { %>
    <p>No addresses found. Please add a new address.</p>
<% } %>

             </div>


                    <div class="col-lg-4">
                        <div class="row">
                            <div class="col-md-12">
                                <div class="cart-detail card p-4 shadow-sm rounded">
                                    <h2 class="mb-4 text-center">Cart Summary</h2>
                                    <ul class="cart-summary list-unstyled">
                                        <!-- Display product list -->
                                        <li class="cart-item mb-3">
                                            <ul class="product-list list-unstyled">
                                                <% if (cart.products.length > 0) { %>
                                                    <% cart.products.forEach(function(item) { %>
                                                        <% 
                                                            const price = item.product.offerPrice || item.product.price; 
                                                            const totalItemPrice = price * item.quantity;
                                                        %>
                                                       <li class="d-flex justify-content-between align-items-start mb-3 p-3 border-bottom">
                                                        <div class="d-flex flex-column">
                                                            <strong class="text-dark mb-2"><%= item.product.name %></strong>
                                                            <small class="text-muted">Quantity: <%= item.quantity %></small>
                                                        </div>
                                                        <div class="text-right">
                                                            <span class="font-weight-bold text-primary">&#8377; <%= totalItemPrice.toFixed(2) %></span>
                                                        </div>
                                                    </li>
                                                    
                                                    
                                                    <% }) %>
                                                <% } else { %>
                                                    <li class="text-center text-muted">Your cart is empty</li>
                                                <% } %>
                                            </ul>
                                            
                                        </li>
                            
                                        <!-- Shipping cost -->
                                        <li class="cart-item d-flex justify-content-between align-items-center mb-3">
                                            <span>Shipping</span>
                                            <span class="font-weight-bold">Free</span>
                                        </li>
                            
                                        <!-- Order total -->
                                        <li class="cart-item d-flex justify-content-between align-items-center mb-3 font-weight-bold">
                                            <span>Total Amount</span>
                                            <span class="font-weight-bold" id="totalAmount">&#8377; <%= totalPrice.toFixed(2) %></span>
                                        </li>
                            
                                        <!-- Coupon discount (if any) -->
                                        <li class="discount-item d-flex justify-content-between align-items-center mb-3" style="display: none;">
                                            <span>Coupon Discount</span>
                                            <span class="font-weight-bold discount-amount">&#8377; 0</span>
                                        </li>
                                        
                            
                                        <!-- Subtotal (if needed) -->
                                        <li class="subtotal-item d-flex justify-content-between align-items-center mb-3" style="display: none;">
                                            <span>Subtotal</span>
                                            <span class="font-weight-bold subtotal-amount">&#8377; <%= totalPrice.toFixed(2) %></span>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                                                        
                            

                         <div class="w-100"></div>

                         <div class="col-md-12">
                            <div class="cart-detail">
                                <h2 class="text-center mb-4" style="color: #333;">Payment Method</h2> <!-- Centered heading -->
                        
                                <div class="form-group">
                                    <div class="col-md-12">
                                        <div class="radio mb-3"> <!-- Added margin-bottom for spacing -->
                                            <label style="font-weight: 600;"> <!-- Bold label for emphasis -->
                                                <input type="radio" name="optradio" value="razorpay"> 
                                                <span style="margin-left: 8px;">Online Payment</span> <!-- Added spacing -->
                                            </label>
                                        </div>
                                    </div>
                                </div>
                        
                                <div class="form-group">
                                    <div class="col-md-12">
                                        <div class="radio mb-3">
                                            <label style="font-weight: 600;">
                                                <input type="radio" name="optradio" value="cod" id="codOption"> 
                                                <span style="margin-left: 8px;">COD</span>
                                            </label>
                                            <div id="codWarning" class="text-danger" style="display: none; margin-top: 4px;">
                                                This option is only available for orders under ₹1000.
                                            </div>
                                        </div>
                                    </div>
                                </div>
                        
                            </div>
                        </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12 text-center">
                                <p><button class="btn btn-primary" id="placeOrderBtn">Place an order</button> </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- content end here -->
<!-- Modal for showing coupons -->
<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="couponModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="couponModalLabel">Available Coupon Codes</h5>
                <button type="button" class="close text-white" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="coupon-list">
                    <% if (coupons.length > 0) { %>
                        <ul class="list-group">
                            <% coupons.forEach(function(coupon) { %>
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <span><%= coupon.code %> - <%= coupon.discount %>% off</span>
                                    <span class="badge badge-primary badge-pill">
                                        Expires: <%= coupon.expirationDate instanceof Date ? coupon.expirationDate.toDateString() : 'N/A' %>
                                    </span>
                                </li>
                            <% }) %>
                        </ul>
                    <% } else { %>
                        <p>No coupons available at the moment.</p>
                    <% } %>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


<!------------------------------ modal for add address ------------------------------------------------------------------------------------------->

         <!-- Modal for adding an address -->
<div class="modal fade" id="addressModal" tabindex="-1" aria-labelledby="addressModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addressModalLabel">Add New Address</h5>
                <button id="clickbtn" type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <!-- Address form -->
                <form id="addressForm" action="/CheckoutAddaddress" method="post">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="addressName" class="form-label">Name</label>
                            <input type="text" class="form-control" id="addressName" name="addressName" >
                            <div class="invalid-feedback" id="name-error">Name is required.</div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="addressEmail" class="form-label">Email</label>
                            <input type="email" class="form-control" id="addressEmail" name="addressEmail" >
                            <div class="invalid-feedback" id="email-error">Please enter a valid email.</div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="addressMobile" class="form-label">Mobile</label>
                            <input type="tel" class="form-control" id="addressMobile" name="addressMobile" pattern="[0-9]{10}" >
                            <div class="invalid-feedback" id="mobile-error">Mobile number must be 10 digits.</div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="addressHouse" class="form-label">House/Apartment No.</label>
                            <input type="text" class="form-control" id="addressHouse" name="addressHouse" >
                            <div class="invalid-feedback" id="house-error">House/Apartment number is required.</div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="addressStreet" class="form-label">Street</label>
                            <input type="text" class="form-control" id="addressStreet" name="addressStreet" >
                            <div class="invalid-feedback" id="street-error">Street is required.</div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="addressCity" class="form-label">City</label>
                            <input type="text" class="form-control" id="addressCity" name="addressCity" >
                            <div class="invalid-feedback" id="city-error">City is required.</div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="addressDistrict" class="form-label">District</label>
                            <input type="text" class="form-control" id="addressDistrict" name="addressDistrict" >
                            <div class="invalid-feedback" id="district-error">District is required.</div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="addressState" class="form-label">State</label>
                            <input type="text" class="form-control" id="addressState" name="addressState" >
                            <div class="invalid-feedback" id="state-error">State is required.</div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="addressPin" class="form-label">Pin Code</label>
                            <input type="number" class="form-control" id="addressPin" name="addressPin">
                            <div class="invalid-feedback" id="pin-error">Pin code is required.</div>
                        </div>
                    </div>
                    <button type="submit" class="btn btn-primary">Save Address</button>
                </form>
                
                
                <!-- Address form end -->
            </div>
        </div>
    </div>
</div>




<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<script>


document.addEventListener('DOMContentLoaded', function() {
    const totalAmountElement = document.getElementById('totalAmount'); // Total amount element
    const codOption = document.getElementById('codOption'); // COD radio button
    const codWarning = document.getElementById('codWarning'); // Warning message
    
    // Function to check the total amount and enable/disable COD option
    function updateCodOption() {
        const totalAmount = parseFloat(totalAmountElement.innerText.replace(/,/g, '').replace('₹', '').trim());
        
        if (totalAmount <= 1000) {
            codOption.disabled = false; // Enable COD option
            codWarning.style.display = 'none'; // Hide warning message
        } else {
            codOption.disabled = true; // Disable COD option
            codWarning.style.display = 'block'; // Show warning message
        }
    }

    // Call the function initially to set the correct state
    updateCodOption();

    // Optionally, if the total amount can change (like applying discounts), call this function again
    // whenever the total amount changes.
});


document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('addressForm');

    form.addEventListener('submit', function (event) {
        let valid = true;

        // Clear previous error messages
        const errors = document.querySelectorAll('.invalid-feedback');
        errors.forEach(error => error.style.display = 'none');

        // Validate Name
        const name = document.getElementById('addressName');
        if (!name.value.trim()) {
            showError('name-error', 'Name is required.');
            valid = false;
        }

        // Validate Email
        const email = document.getElementById('addressEmail');
        if (!email.value.trim() || !email.checkValidity()) {
            showError('email-error', 'Please enter a valid email.');
            valid = false;
        }

        // Validate Mobile
        const mobile = document.getElementById('addressMobile');
        if (!mobile.value.trim() || !mobile.checkValidity()) {
            showError('mobile-error', 'Mobile number must be 10 digits.');
            valid = false;
        }

        // Validate House/Apartment
        const house = document.getElementById('addressHouse');
        if (!house.value.trim()) {
            showError('house-error', 'House/Apartment number is required.');
            valid = false;
        }

        // Validate Street
        const street = document.getElementById('addressStreet');
        if (!street.value.trim()) {
            showError('street-error', 'Street is required.');
            valid = false;
        }

        // Validate City
        const city = document.getElementById('addressCity');
        if (!city.value.trim()) {
            showError('city-error', 'City is required.');
            valid = false;
        }

        // Validate District
        const district = document.getElementById('addressDistrict');
        if (!district.value.trim()) {
            showError('district-error', 'District is required.');
            valid = false;
        }

        // Validate State
        const state = document.getElementById('addressState');
        if (!state.value.trim()) {
            showError('state-error', 'State is required.');
            valid = false;
        }

        // Validate Pin Code
        const pin = document.getElementById('addressPin');
        if (!pin.value.trim()) {
            showError('pin-error', 'Pin code is required.');
            valid = false;
        }

        if (!valid) {
            event.preventDefault(); // Prevent form submission if validation fails
        }
    });

    function showError(id, message) {
        const errorElement = document.getElementById(id);
        errorElement.textContent = message;
        errorElement.style.display = 'block';
    }
});



document.addEventListener('DOMContentLoaded', () => {
    // Handle Delete button clicks
    document.querySelectorAll('.btn-outline-danger').forEach(button => {
        button.addEventListener('click', () => {
            const addressId = button.getAttribute('data-id');

            // Use SweetAlert2 for confirmation
            Swal.fire({
                title: 'Are you sure?',
                text: 'You won\'t be able to revert this!',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!',
                cancelButtonText: 'Cancel'
            }).then(async (result) => {
                if (result.isConfirmed) {
                    try {
                        const response = await fetch(`/CheckoutDeleteAddress/${addressId}`, { method: 'DELETE' });
                        const result = await response.json();
                        if (result.success) {
                            Swal.fire(
                                'Deleted!',
                                'Your address has been deleted.',
                                'success'
                            ).then(() => {
                                location.reload(); // Optionally, reload the page or update the UI
                            });
                        } else {
                            Swal.fire(
                                'Error!',
                                'Failed to delete the address.',
                                'error'
                            );
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        Swal.fire(
                            'Error!',
                            'An error occurred while deleting the address.',
                            'error'
                        );
                    }
                }
            });
        });
    });
});



document.addEventListener('DOMContentLoaded', () => {
    // Handling Place Order logic
    const placeOrderBtn = document.getElementById('placeOrderBtn');
    const rzpButton = document.getElementById('rzp-button1');
    
    placeOrderBtn.addEventListener('click', async () => {
        const selectedAddress = document.querySelector('input[name="address"]:checked');
        const paymentMethod = document.querySelector('input[name="optradio"]:checked');
         const couponCode = document.getElementById('coupon-code').value.trim(); 

        if (!selectedAddress) {
            alert('Please select an address.');
            return;
        }
        
        if (!paymentMethod) {
            alert('Please select a payment method.');
            return;
        }
        
        const addressId = selectedAddress.value;
        const paymentMethodValue = paymentMethod.value;
        
        if (paymentMethodValue === 'razorpay') {
    try {
        const totalAmount = document.getElementById('totalAmount').innerText;

        // Fetch Razorpay order details from server
        const orderResponse = await fetch(`/razorpayCheckout?couponCode=${couponCode}`);
        let data = await orderResponse.json();

        console.log('Razorpay Order Data:', data); // Log the data received

        const options = {
            key: data.keyId,
            amount: data.totalAmount * 100, // Razorpay expects amount in paise
            currency: "INR",
            name: "Your Store Name",
            description: "Test Transaction",
            order_id: data.razorpayOrderId,
            handler: function (response) {
                console.log('Payment handler triggered'); // Added log to ensure handler is called
                console.log('Razorpay Response:', response); // Log Razorpay response

                const paymentDetails = {
                    razorpay_payment_id: response.razorpay_payment_id,
                    razorpay_order_id: response.razorpay_order_id,
                    razorpay_signature: response.razorpay_signature,
                    addressId : addressId,
                    totalAmount: totalAmount, // Total amount from DOM,
                    couponCode : couponCode
                };

                console.log('Payment Details:', paymentDetails); // Log payment details

                // Call the success route to place the order after payment
                fetch('/placeOrderAfterPayment', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(paymentDetails)
                })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        console.log('Order successfully placed');
                        window.location.href = '/orderConfirmation';
                    } else {
                        console.error('Failed to place order:', data);
                        alert('Order could not be placed. Please try again.');
                    }
                })
                .catch(error => console.error('Error placing order:', error));
            },
            "prefill": {
                "name": "Customer Name",
                "email": "customer@example.com",
                "contact": "9999999999"
            },
            "theme": { "color": "#F37254" }
        };

        console.log('Initializing Razorpay with options:', options); // Log Razorpay options

        const rzp1 = new Razorpay(options);
        rzp1.open();

          // Handle payment failure
          rzp1.on('payment.failed', async (response) => {
                    console.error('Payment failed:', response); // Log payment failure

                    // Call the route to place order with payment status as 'Failed'
                    const failedPaymentDetails = {
                        addressId: addressId,
                        totalAmount: totalAmount,
                        couponCode: couponCode,
                        paymentStatus: 'Failed' // Set payment status as Failed
                    };

                    const failureResponse = await fetch('/placeOrderFailed', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(failedPaymentDetails)
                    });

                    const result = await failureResponse.json();
                    if (result.success) {
                        console.log('Order placed with failed payment status');
                         window.location.href = '/orderConfirmation'
                    } else {
                        alert('Order could not be placed due to payment failure. Please try again.');
                    }
                });

    } catch (error) {
        console.error('Error initializing Razorpay payment:', error);
        alert('Failed to initialize Razorpay payment.');
    }
 } else {
            const response = await fetch('/placeOrder', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    addressId: addressId,
                    paymentMethod: paymentMethodValue,
                    couponCode: couponCode
                })
            });
            const result = await response.json();
            if (result.success) {
                window.location.href = '/orderConfirmation';
            } else {
                alert('Order failed. Please try again.');
            }
        }
    });

    

    // Coupon Application Logic
    const couponForm = document.getElementById('couponForm');
    const couponCodeInput = document.getElementById('coupon-code');
    const messageBox = document.getElementById('message');
    const removeCouponBtn = document.getElementById('removeCouponBtn');

    couponForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const couponCode = couponCodeInput.value.trim();
        if (!couponCode) {
            showMessage('Please enter a coupon code.', 'error');
            return;
        }
        applyCoupon(couponCode);
    });

    removeCouponBtn.addEventListener('click', removeCoupon);

    function applyCoupon(couponCode) {
        const url = '/applyCoupon';
        fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ couponCode }),
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showMessage(`${data.message} You get ${data.discount}% off!`, 'success');
                couponCodeInput.disabled = true;
                removeCouponBtn.style.display = 'inline-block';
            } else {
                showMessage(data.message, 'error');
            }
        })
        .catch(error => {
            console.error('Error applying coupon:', error);
            showMessage('An error occurred while applying the coupon. Please try again.', 'error');
        });
    }

    function removeCoupon() {
        couponCodeInput.disabled = false;
        couponCodeInput.value = "";
        removeCouponBtn.style.display = 'none';
        showMessage('Coupon removed successfully.', 'success');
    }

    function showMessage(message, type) {
        messageBox.className = '';
        messageBox.classList.add('alert', type === 'success' ? 'alert-success' : 'alert-danger');
        messageBox.textContent = message;
        messageBox.setAttribute('aria-live', 'polite');
    }

    // Clear message when typing starts
    couponCodeInput.addEventListener('input', () => {
        messageBox.textContent = '';
    });

    // Hide remove button initially
    removeCouponBtn.style.display = 'none';
});


</script>



<script>
    document.addEventListener('DOMContentLoaded', () => {
        const removeCouponBtn = document.getElementById('removeCouponBtn');
        const couponForm = document.getElementById('couponForm');

        couponForm.addEventListener('submit', async function(event) {
            event.preventDefault();

            const couponCode = document.getElementById('coupon-code').value.trim();
            const totalAmountElement = document.getElementById('totalAmount');
            
            if (!totalAmountElement) {
                console.error('Total Amount element not found.');
                showMessage('Error retrieving total amount.', 'error');
                return;
            }

            // Extract and convert total amount
            const totalAmountText = totalAmountElement.innerText.replace('₹', '').replace(',', '');
            const totalAmount = parseFloat(totalAmountText);

            if (!couponCode || isNaN(totalAmount)) {
                showMessage('Please enter a valid coupon code and ensure the total amount is correct.', 'error');
                return;
            }

            try {
                const response = await fetch('/applyCoupon', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ couponCode, totalAmount })
                });

                const result = await response.json();

                if (result.success) {
                    const discount = result.discount;
                    const discountedTotal = totalAmount - discount;

                    document.querySelector('.discount-item').style.display = 'flex';
                    document.querySelector('.discount-amount').innerText = `₹ ${discount.toFixed(2)}`;
                    totalAmountElement.innerText = `₹ ${discountedTotal.toFixed(2)}`;
                    removeCouponBtn.style.display = 'inline-block';
                    showMessage(`${result.message} You get ₹ ${discount.toFixed(2)} off!`, 'success');
                } else {
                    showMessage(result.message, 'error');
                }
            } catch (error) {
                console.error('Error applying coupon:', error);
                showMessage('An error occurred while applying the coupon. Please try again.', 'error');
            }
        });

        // Handling Remove Coupon button click
        removeCouponBtn.addEventListener('click', () => {
            location.reload();
            // Refresh the coupon field and total amount
            document.getElementById('coupon-code').value = ""; // Clear coupon input
            removeCouponBtn.style.display = 'none'; // Hide remove button

            // Reset total amount to original
            const originalAmount = parseFloat(totalAmountElement.dataset.originalAmount); // Get original amount
            totalAmountElement.innerText = `₹ ${originalAmount.toFixed(2)}`; // Reset to original amount
            document.querySelector('.discount-item').style.display = 'none'; // Hide discount item
            showMessage('Coupon removed successfully.', 'success');
        });

        function showMessage(message, type) {
            const messageBox = document.getElementById('message');
            messageBox.className = '';
            messageBox.classList.add('alert', type === 'success' ? 'alert-success' : 'alert-danger');
            messageBox.textContent = message;
            messageBox.setAttribute('aria-live', 'polite');
        }

        // Hide remove button initially
        removeCouponBtn.style.display = 'none';
        

    });
</script>

    
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
   


<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
  <script src="/js/main.js"></script>

    <%- include('../Layout/user/footer.ejs') %>

  
    
   
      
   